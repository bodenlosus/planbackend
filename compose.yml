services:
  db:
    container_name: postgres
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      PGDATA: /data/postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres:/data/postgres
      - ./dbinit/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./dbinit/functions.sql:/docker-entrypoint-initdb.d/functions.sql
      - ./dbinit/stocks.sql:/docker-entrypoint-initdb.d/stocks.sql
    ports:
      - 0.0.0.0:5432:5432
    networks:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  gotrue:
    container_name: gotrue_container
    image: supabase/gotrue:v2.177.0
    depends_on:
      db:
        condition: service_healthy
    environment:
      GOTRUE_SITE_URL: ${SITE_URL:-https://localhost:3000}
      GOTRUE_API_HOST: 0.0.0.0
      API_EXTERNAL_URL: http://localhost:8081
      PORT: 9999
      DB_NAMESPACE: auth
      # DB_MAX_POOL_SIZE: 1
      GOTRUE_LOG_LEVEL: warn
      GOTRUE_DB_DRIVER: postgres
      DATABASE_URL: postgresql://auth_admin:auth@db:5432/postgres?sslmode=disable # TODO: REMOVE FOR PROD
      GOTRUE_JWT_SECRET: ${JWT}37c304f8-51aa-419a-a1af-06154e63707a
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_MAILER_AUTOCONFIRM: true # TODO: SMTP
      GOTRUE_DISABLE_SIGNUP: false
      GOTRUE_EXTERNAL_EMAIL_ENABLED: true
      GOTRUE_EXTERNAL_PHONE_ENABLED: false
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9999/health"]
      interval: 5s
      timeout: 5s
      retries: 5

    restart: unless-stopped
    networks:
      - postgres
  db_pooler:
    container_name: db_pooler
    image: bitnami/pgbouncer:1.24.1
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGBOUNCER_PORT: 6432
      PGBOUNCER_DATABASE: postgres
      POSTGRESQL_PORT: 5432
      POSTGRESQL_HOST: db
      POSTGRESQL_USERNAME: authenticator
      POSTGRESQL_PASSWORD: auth
      PGBOUNCER_MAX_CLIENT_CONN: 120
      PGBOUNCER_POOL_MODE: transaction
      PGBOUNCER_DEFAULT_POOL_SIZE: 20
      PGBOUNCER_USERLIST_FILE: /bitnami/pgbouncer/userlist.txt
    restart: unless-stopped
    volumes:
      - ./userlist.txt:/bitnami/pgbouncer/userlist.txt:ro
    networks:
      - postgres
  rest:
    container_name: rest
    image: postgrest/postgrest:v13.0.4
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGRST_DB_SCHEMAS: "api, depots"
      PGRST_DB_URI: postgres://authenticator:auth@db_pooler:6432/postgres
      PGRST_OPENAPI_SERVER_PROXY_URI: http://127.0.0.1:3000
      PGRST_JWT_SECRET: 37c304f8-51aa-419a-a1af-06154e63707a
      restart: unless-stopped
    networks:
      - postgres
  gateway:
    container_name: gateway
    image: nginx:1.29.0-alpine
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8080:80
    depends_on:
      - gotrue
      - rest
    networks:
      - postgres
  updater:
    container_name: updater
    build:
      context: ./updater
      dockerfile: ./dockerfile
      network: "host"

    depends_on:
      db:
        condition: service_healthy

    environment:
      DATABASE_URL: postgresql://service_worker:service@db_pooler:6432/postgres
      YF_TIMEOUT: 0.2
      # UPDATE_IMMEDIATE: true
    restart: unless-stopped
    networks:
      - postgres


  db-init:
    image: postgres:17-alpine
    depends_on:
      gotrue:
        condition: service_healthy

    environment:
      PGHOST: postgres      # Connect to the 'postgres' service
      PGPORT: 5432         # Standard PostgreSQL port
      PGUSER: postgres     # Database username
      PGPASSWORD: postgres # Database password
      PGDATABASE: postgres     # Which database to connect tonetworks:

    volumes:
      - ./dbinit/permissions.sql:/permissions.sql

    networks:
      - postgres
  
    command: >
      sh -c "
        echo 'Waiting for GoTrue to be ready...'
        sleep 10
        echo 'Running post-GoTrue initialization...'
        psql -f /permissions.sql
        echo 'Post-GoTrue initialization complete!'
      "      
    
networks:
  postgres:
    driver: bridge
volumes:
  postgres:
